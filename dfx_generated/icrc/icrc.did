type ICRCAccount = record { owner : principal; subaccount : opt vec nat8 };
type ICRCTransferError = variant {
  GenericError : _InlineICRCTransferErrorGenericError;
  TemporarilyUnavailable;
  BadBurn : _InlineICRCTransferErrorBadBurn;
  Duplicate : _InlineICRCTransferErrorDuplicate;
  BadFee : _InlineICRCTransferErrorBadFee;
  CreatedInFuture : _InlineICRCTransferErrorCreatedInFuture;
  TooOld;
  InsufficientFunds : _InlineICRCTransferErrorInsufficientFunds;
};
type ManualReply = variant { Ok : Tokens; Err : text };
type ManualReply_1 = variant {
  Ok : nat;
  Err : TransferError;
  message : text;
  unAuthorized : bool;
};
type ManualReply_2 = variant {
  Ok : nat;
  Err : ICRCTransferError;
  message : text;
  unAuthorized : bool;
};
type ManualReply_3 = variant { Ok : nat; Err : text };
type ManualReply_4 = variant {
  Ok : nat;
  Err : ICRCTransferError;
  message : text;
  success : nat;
  unAuthorized : bool;
};
type Tokens = record { e8s : nat64 };
type TransferError = variant {
  TxTooOld : _InlineTransferErrorTxTooOld;
  BadFee : _InlineTransferErrorBadFee;
  TxDuplicate : _InlineTransferErrorTxDuplicate;
  TxCreatedInFuture;
  InsufficientFunds : _InlineTransferErrorInsufficientFunds;
};
type _InlineICRCTransferErrorBadBurn = record { min_burn_amount : nat };
type _InlineICRCTransferErrorBadFee = record { expected_fee : nat };
type _InlineICRCTransferErrorCreatedInFuture = record { ledger_time : nat64 };
type _InlineICRCTransferErrorDuplicate = record { duplicate_of : nat };
type _InlineICRCTransferErrorGenericError = record {
  message : text;
  error_code : nat;
};
type _InlineICRCTransferErrorInsufficientFunds = record { balance : nat };
type _InlineTransferErrorBadFee = record { expected_fee : Tokens };
type _InlineTransferErrorInsufficientFunds = record { balance : Tokens };
type _InlineTransferErrorTxDuplicate = record { duplicate_of : nat64 };
type _InlineTransferErrorTxTooOld = record { allowed_window_nanos : nat64 };
service : () -> {
  binary_address_from_principal : (principal, nat32) -> (vec nat8) query;
  canisterBalance128 : () -> (nat) query;
  ckbtc_balance_of : (ICRCAccount) -> (nat) query;
  ckbtc_fee : () -> (nat) query;
  getIdentifierBlob : (nat32) -> (vec nat8) query;
  get_account_balance_of_icp_identifier : (principal, nat32) -> (ManualReply);
  get_canister_binary_subaccount_from_identifier : (nat32) -> (vec nat8) query;
  get_canister_hex_subaccount_from_identifier : (nat32) -> (text) query;
  get_icrc_canister_id : () -> (principal) query;
  get_will_canister_id : () -> (text) query;
  hex_address_from_principal : (principal, nat32) -> (text) query;
  icp_transfer : (nat32, principal) -> (ManualReply_1);
  icrc_ckbtc_transfer : (nat32, principal, nat) -> (ManualReply_2);
  icrc_icp_balanceOf : (nat32) -> (ManualReply_3) query;
  icrc_icp_fee : () -> (ManualReply_3) query;
  icrc_icp_transfer : (nat32, principal) -> (ManualReply_4);
  list_canister_ids : () -> (vec record { text; text }) query;
  set_will_canister_id : (text) -> (text);
}